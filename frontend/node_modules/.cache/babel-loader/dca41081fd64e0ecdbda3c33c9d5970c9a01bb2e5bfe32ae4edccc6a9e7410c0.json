{"ast":null,"code":"var _jsxFileName = \"/Users/jonathandowdell/Workstation/React/million-pixel-app/src/pages/CanvasPage.jsx\",\n  _import$meta,\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport imageSrc from \"../Banner Hi Rez.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = process.env.REACT_APP_API_BASE || ((_import$meta = import.meta) === null || _import$meta === void 0 ? void 0 : _import$meta.env) && import.meta.env.VITE_API_BASE || \"http://localhost:3001\";\nconst CANVAS_WIDTH = 1495;\nconst CANVAS_HEIGHT = 1024;\nconst GRID_COLUMNS = 100;\nconst GRID_ROWS = 100;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\nexport default function CanvasPage() {\n  _s();\n  const canvasRef = useRef(null);\n  const [revealedCells, setRevealedCells] = useState([]);\n  const totalCells = GRID_COLUMNS * GRID_ROWS;\n  useEffect(() => {\n    const socket = io(API_BASE, {\n      transports: [\"websocket\"]\n    });\n    const merge = incoming => setRevealedCells(prev => {\n      const seen = new Set(prev.map(c => `${c.x},${c.y}`));\n      const out = [...prev];\n      for (const c of incoming) if (!seen.has(`${c.x},${c.y}`)) out.push(c);\n      return out;\n    });\n    fetch(`${API_BASE}/state`).then(r => r.json()).then(({\n      cells\n    }) => merge(cells)).catch(() => {});\n    socket.on(\"bootstrap\", ({\n      cells\n    }) => merge(cells));\n    socket.on(\"cells_revealed\", ({\n      cells\n    }) => merge(cells));\n    return () => {\n      socket.off(\"bootstrap\");\n      socket.off(\"cells_revealed\");\n      socket.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    drawCanvas();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [revealedCells]);\n  const drawCanvas = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      const imageData = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const avg = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\n        imageData.data[i] = avg;\n        imageData.data[i + 1] = avg;\n        imageData.data[i + 2] = avg;\n      }\n      ctx.putImageData(imageData, 0, 0);\n      revealedCells.forEach(({\n        x,\n        y\n      }) => {\n        ctx.drawImage(img, x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT, x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT);\n      });\n      drawGrid(ctx);\n    };\n  };\n  const drawGrid = ctx => {\n    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n  };\n  const remaining = Math.max(totalCells - revealedCells.length, 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"grid\",\n      placeItems: \"center\",\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 12,\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Million Pixel Reveal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Cells Remaining: \", remaining]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      style: {\n        border: \"2px solid #334155\",\n        borderRadius: 12,\n        boxShadow: \"0 4px 12px rgba(0,0,0,0.5)\",\n        maxWidth: \"100%\",\n        height: \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(CanvasPage, \"pWlBUpCE511iXgXvX9ctN2DokMw=\");\n_c = CanvasPage;\nvar _c;\n$RefreshReg$(_c, \"CanvasPage\");","map":{"version":3,"names":["React","useRef","useEffect","useState","io","imageSrc","jsxDEV","_jsxDEV","API_BASE","process","env","REACT_APP_API_BASE","_import$meta","import","meta","VITE_API_BASE","CANVAS_WIDTH","CANVAS_HEIGHT","GRID_COLUMNS","GRID_ROWS","CELL_WIDTH","CELL_HEIGHT","CanvasPage","_s","canvasRef","revealedCells","setRevealedCells","totalCells","socket","transports","merge","incoming","prev","seen","Set","map","c","x","y","out","has","push","fetch","then","r","json","cells","catch","on","off","disconnect","drawCanvas","canvas","current","ctx","getContext","img","Image","src","onload","drawImage","imageData","getImageData","i","data","length","avg","putImageData","forEach","drawGrid","strokeStyle","beginPath","moveTo","lineTo","stroke","j","remaining","Math","max","style","display","placeItems","padding","children","marginBottom","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","border","borderRadius","boxShadow","maxWidth","_c","$RefreshReg$"],"sources":["/Users/jonathandowdell/Workstation/React/million-pixel-app/src/pages/CanvasPage.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport imageSrc from \"../Banner Hi Rez.png\";\n\nconst API_BASE =\n  process.env.REACT_APP_API_BASE ||\n  (import.meta?.env && import.meta.env.VITE_API_BASE) ||\n  \"http://localhost:3001\";\n\nconst CANVAS_WIDTH = 1495;\nconst CANVAS_HEIGHT = 1024;\nconst GRID_COLUMNS = 100;\nconst GRID_ROWS = 100;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\n\nexport default function CanvasPage() {\n  const canvasRef = useRef(null);\n  const [revealedCells, setRevealedCells] = useState([]);\n  const totalCells = GRID_COLUMNS * GRID_ROWS;\n\n  useEffect(() => {\n    const socket = io(API_BASE, { transports: [\"websocket\"] });\n\n    const merge = (incoming) =>\n      setRevealedCells((prev) => {\n        const seen = new Set(prev.map((c) => `${c.x},${c.y}`));\n        const out = [...prev];\n        for (const c of incoming) if (!seen.has(`${c.x},${c.y}`)) out.push(c);\n        return out;\n      });\n\n    fetch(`${API_BASE}/state`)\n      .then((r) => r.json())\n      .then(({ cells }) => merge(cells))\n      .catch(() => {});\n\n    socket.on(\"bootstrap\", ({ cells }) => merge(cells));\n    socket.on(\"cells_revealed\", ({ cells }) => merge(cells));\n\n    return () => {\n      socket.off(\"bootstrap\");\n      socket.off(\"cells_revealed\");\n      socket.disconnect();\n    };\n  }, []);\n\n  useEffect(() => {\n    drawCanvas();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [revealedCells]);\n\n  const drawCanvas = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n      const imageData = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const avg =\n          (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) /\n          3;\n        imageData.data[i] = avg;\n        imageData.data[i + 1] = avg;\n        imageData.data[i + 2] = avg;\n      }\n      ctx.putImageData(imageData, 0, 0);\n\n      revealedCells.forEach(({ x, y }) => {\n        ctx.drawImage(\n          img,\n          x * CELL_WIDTH,\n          y * CELL_HEIGHT,\n          CELL_WIDTH,\n          CELL_HEIGHT,\n          x * CELL_WIDTH,\n          y * CELL_HEIGHT,\n          CELL_WIDTH,\n          CELL_HEIGHT\n        );\n      });\n\n      drawGrid(ctx);\n    };\n  };\n\n  const drawGrid = (ctx) => {\n    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n  };\n\n  const remaining = Math.max(totalCells - revealedCells.length, 0);\n\n  return (\n    <div style={{ display: \"grid\", placeItems: \"center\", padding: 20 }}>\n      <div style={{ marginBottom: 12, textAlign: \"center\" }}>\n        <h1>Million Pixel Reveal</h1>\n        <p>Cells Remaining: {remaining}</p>\n      </div>\n      <canvas\n        ref={canvasRef}\n        width={CANVAS_WIDTH}\n        height={CANVAS_HEIGHT}\n        style={{\n          border: \"2px solid #334155\",\n          borderRadius: 12,\n          boxShadow: \"0 4px 12px rgba(0,0,0,0.5)\",\n          maxWidth: \"100%\",\n          height: \"auto\",\n        }}\n      />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}