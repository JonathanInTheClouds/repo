{"ast":null,"code":"var _jsxFileName = \"/Users/jonathandowdell/Workstation/React/million-pixel-app/src/pages/CanvasPage.jsx\",\n  _import$meta,\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport imageSrc from \"../Banner Hi Rez.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = process.env.REACT_APP_API_BASE || ((_import$meta = import.meta) === null || _import$meta === void 0 ? void 0 : _import$meta.env) && import.meta.env.VITE_API_BASE || \"http://localhost:3001\";\n\n// Canvas + grid\nconst CANVAS_WIDTH = 1495;\nconst CANVAS_HEIGHT = 1024;\nconst GRID_COLUMNS = 200; // 200x200 = 40,000 cells\nconst GRID_ROWS = 200;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\nexport default function CanvasPage() {\n  _s();\n  const canvasRef = useRef(null);\n  const imgRef = useRef(null);\n  const [imgReady, setImgReady] = useState(false);\n  const [revealedCells, setRevealedCells] = useState([]);\n  const [toasts, setToasts] = useState([]); // { id, text }\n  const totalCells = GRID_COLUMNS * GRID_ROWS;\n\n  // --- toast helpers ---\n  function addToast(text, ms = 8000) {\n    if (!text) return;\n    const id = Math.random().toString(36).slice(2);\n    setToasts(t => [...t, {\n      id,\n      text\n    }]);\n    setTimeout(() => setToasts(t => t.filter(x => x.id !== id)), ms);\n  }\n\n  // --- preload image once ---\n  useEffect(() => {\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      imgRef.current = img;\n      setImgReady(true);\n    };\n    img.onerror = () => console.error(\"Failed to load canvas image\");\n  }, []);\n\n  // --- sockets + bootstrap state ---\n  useEffect(() => {\n    const socket = io(API_BASE, {\n      transports: [\"websocket\"]\n    });\n    const merge = incoming => setRevealedCells(prev => {\n      const seen = new Set(prev.map(c => `${c.x},${c.y}`));\n      const out = [...prev];\n      for (const c of incoming) if (!seen.has(`${c.x},${c.y}`)) out.push(c);\n      return out;\n    });\n    fetch(`${API_BASE}/state`).then(r => r.json()).then(({\n      cells\n    }) => merge(cells)).catch(() => {});\n    socket.on(\"bootstrap\", ({\n      cells\n    }) => merge(cells));\n    socket.on(\"cells_revealed\", ({\n      cells,\n      message\n    }) => {\n      merge(cells);\n      if (message) addToast(message);\n    });\n    return () => {\n      socket.off(\"bootstrap\");\n      socket.off(\"cells_revealed\");\n      socket.disconnect();\n    };\n  }, []);\n\n  // --- draw whenever cells or image change ---\n  useEffect(() => {\n    drawCanvas();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [revealedCells, imgReady]);\n  function drawCanvas() {\n    const canvas = canvasRef.current;\n    const img = imgRef.current;\n    if (!canvas || !img) return;\n    const ctx = canvas.getContext(\"2d\");\n\n    // draw grayscale base\n    ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    const imageData = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    const data = imageData.data;\n    for (let i = 0; i < data.length; i += 4) {\n      const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n      data[i] = avg; // R\n      data[i + 1] = avg; // G\n      data[i + 2] = avg; // B\n    }\n    ctx.putImageData(imageData, 0, 0);\n\n    // reveal colored cells\n    for (let k = 0; k < revealedCells.length; k++) {\n      const {\n        x,\n        y\n      } = revealedCells[k];\n      ctx.drawImage(img, x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT, x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT);\n    }\n\n    // grid overlay\n    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n  }\n  const remaining = Math.max(totalCells - revealedCells.length, 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"grid\",\n      placeItems: \"center\",\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 12,\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Million Pixel Reveal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Cells Remaining: \", remaining]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      style: {\n        border: \"2px solid #334155\",\n        borderRadius: 12,\n        boxShadow: \"0 4px 12px rgba(0,0,0,0.5)\",\n        maxWidth: \"100%\",\n        height: \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        bottom: 20,\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 8,\n        zIndex: 1000,\n        pointerEvents: \"none\"\n      },\n      children: toasts.map(t => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxWidth: 720,\n          background: \"rgba(15,23,42,0.92)\",\n          color: \"#e2e8f0\",\n          border: \"1px solid #334155\",\n          borderRadius: 12,\n          padding: \"10px 14px\",\n          boxShadow: \"0 6px 24px rgba(0,0,0,0.4)\",\n          pointerEvents: \"auto\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            opacity: 0.8,\n            marginRight: 8\n          },\n          children: \"\\uD83D\\uDCAC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: t.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this)]\n      }, t.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_s(CanvasPage, \"5tXLP5awkGbfdMkOcitNziYjv6A=\");\n_c = CanvasPage;\nvar _c;\n$RefreshReg$(_c, \"CanvasPage\");","map":{"version":3,"names":["React","useRef","useEffect","useState","io","imageSrc","jsxDEV","_jsxDEV","API_BASE","process","env","REACT_APP_API_BASE","_import$meta","import","meta","VITE_API_BASE","CANVAS_WIDTH","CANVAS_HEIGHT","GRID_COLUMNS","GRID_ROWS","CELL_WIDTH","CELL_HEIGHT","CanvasPage","_s","canvasRef","imgRef","imgReady","setImgReady","revealedCells","setRevealedCells","toasts","setToasts","totalCells","addToast","text","ms","id","Math","random","toString","slice","t","setTimeout","filter","x","img","Image","src","onload","current","onerror","console","error","socket","transports","merge","incoming","prev","seen","Set","map","c","y","out","has","push","fetch","then","r","json","cells","catch","on","message","off","disconnect","drawCanvas","canvas","ctx","getContext","clearRect","drawImage","imageData","getImageData","data","i","length","avg","putImageData","k","strokeStyle","beginPath","moveTo","lineTo","stroke","j","remaining","max","style","display","placeItems","padding","children","marginBottom","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","border","borderRadius","boxShadow","maxWidth","position","bottom","left","transform","flexDirection","gap","zIndex","pointerEvents","background","color","opacity","marginRight","_c","$RefreshReg$"],"sources":["/Users/jonathandowdell/Workstation/React/million-pixel-app/src/pages/CanvasPage.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport imageSrc from \"../Banner Hi Rez.png\";\n\nconst API_BASE =\n  process.env.REACT_APP_API_BASE ||\n  (import.meta?.env && import.meta.env.VITE_API_BASE) ||\n  \"http://localhost:3001\";\n\n// Canvas + grid\nconst CANVAS_WIDTH = 1495;\nconst CANVAS_HEIGHT = 1024;\nconst GRID_COLUMNS = 200; // 200x200 = 40,000 cells\nconst GRID_ROWS = 200;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\n\nexport default function CanvasPage() {\n  const canvasRef = useRef(null);\n  const imgRef = useRef(null);\n  const [imgReady, setImgReady] = useState(false);\n\n  const [revealedCells, setRevealedCells] = useState([]);\n  const [toasts, setToasts] = useState([]); // { id, text }\n  const totalCells = GRID_COLUMNS * GRID_ROWS;\n\n  // --- toast helpers ---\n  function addToast(text, ms = 8000) {\n    if (!text) return;\n    const id = Math.random().toString(36).slice(2);\n    setToasts((t) => [...t, { id, text }]);\n    setTimeout(() => setToasts((t) => t.filter((x) => x.id !== id)), ms);\n  }\n\n  // --- preload image once ---\n  useEffect(() => {\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      imgRef.current = img;\n      setImgReady(true);\n    };\n    img.onerror = () => console.error(\"Failed to load canvas image\");\n  }, []);\n\n  // --- sockets + bootstrap state ---\n  useEffect(() => {\n    const socket = io(API_BASE, { transports: [\"websocket\"] });\n\n    const merge = (incoming) =>\n      setRevealedCells((prev) => {\n        const seen = new Set(prev.map((c) => `${c.x},${c.y}`));\n        const out = [...prev];\n        for (const c of incoming) if (!seen.has(`${c.x},${c.y}`)) out.push(c);\n        return out;\n      });\n\n    fetch(`${API_BASE}/state`)\n      .then((r) => r.json())\n      .then(({ cells }) => merge(cells))\n      .catch(() => {});\n\n    socket.on(\"bootstrap\", ({ cells }) => merge(cells));\n    socket.on(\"cells_revealed\", ({ cells, message }) => {\n      merge(cells);\n      if (message) addToast(message);\n    });\n\n    return () => {\n      socket.off(\"bootstrap\");\n      socket.off(\"cells_revealed\");\n      socket.disconnect();\n    };\n  }, []);\n\n  // --- draw whenever cells or image change ---\n  useEffect(() => {\n    drawCanvas();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [revealedCells, imgReady]);\n\n  function drawCanvas() {\n    const canvas = canvasRef.current;\n    const img = imgRef.current;\n    if (!canvas || !img) return;\n\n    const ctx = canvas.getContext(\"2d\");\n\n    // draw grayscale base\n    ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n    const imageData = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    const data = imageData.data;\n    for (let i = 0; i < data.length; i += 4) {\n      const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n      data[i] = avg; // R\n      data[i + 1] = avg; // G\n      data[i + 2] = avg; // B\n    }\n    ctx.putImageData(imageData, 0, 0);\n\n    // reveal colored cells\n    for (let k = 0; k < revealedCells.length; k++) {\n      const { x, y } = revealedCells[k];\n      ctx.drawImage(\n        img,\n        x * CELL_WIDTH,\n        y * CELL_HEIGHT,\n        CELL_WIDTH,\n        CELL_HEIGHT,\n        x * CELL_WIDTH,\n        y * CELL_HEIGHT,\n        CELL_WIDTH,\n        CELL_HEIGHT\n      );\n    }\n\n    // grid overlay\n    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n  }\n\n  const remaining = Math.max(totalCells - revealedCells.length, 0);\n\n  return (\n    <div style={{ display: \"grid\", placeItems: \"center\", padding: 20 }}>\n      <div style={{ marginBottom: 12, textAlign: \"center\" }}>\n        <h1>Million Pixel Reveal</h1>\n        <p>Cells Remaining: {remaining}</p>\n      </div>\n\n      <canvas\n        ref={canvasRef}\n        width={CANVAS_WIDTH}\n        height={CANVAS_HEIGHT}\n        style={{\n          border: \"2px solid #334155\",\n          borderRadius: 12,\n          boxShadow: \"0 4px 12px rgba(0,0,0,0.5)\",\n          maxWidth: \"100%\",\n          height: \"auto\",\n        }}\n      />\n\n      {/* Toasts */}\n      <div\n        style={{\n          position: \"fixed\",\n          bottom: 20,\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 8,\n          zIndex: 1000,\n          pointerEvents: \"none\",\n        }}\n      >\n        {toasts.map((t) => (\n          <div\n            key={t.id}\n            style={{\n              maxWidth: 720,\n              background: \"rgba(15,23,42,0.92)\",\n              color: \"#e2e8f0\",\n              border: \"1px solid #334155\",\n              borderRadius: 12,\n              padding: \"10px 14px\",\n              boxShadow: \"0 6px 24px rgba(0,0,0,0.4)\",\n              pointerEvents: \"auto\",\n            }}\n          >\n            <span style={{ opacity: 0.8, marginRight: 8 }}>💬</span>\n            <span>{t.text}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}