{"ast":null,"code":"var _jsxFileName = \"/Users/jonathandowdell/Workstation/React/million-pixel-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport imageSrc from \"./booker-t-washington.jpg\"; // Place 1080p image here\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_COLUMNS = 100; // Width divisions\nconst GRID_ROWS = 100; // Height divisions\nconst CANVAS_WIDTH = 1920;\nconst CANVAS_HEIGHT = 1080;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\nfunction App() {\n  _s();\n  const canvasRef = useRef(null);\n  const [hoveredCell, setHoveredCell] = useState(null);\n  const [mockClaims, setMockClaims] = useState(generateMockClaims());\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      drawGrid(ctx);\n    };\n  }, [mockClaims]);\n  const drawGrid = ctx => {\n    ctx.strokeStyle = \"rgba(0,0,0,0.3)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n    mockClaims.forEach(({\n      x,\n      y\n    }) => {\n      ctx.fillStyle = \"rgba(255,0,0,0.4)\";\n      ctx.fillRect(x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT);\n    });\n  };\n  const handleMouseMove = e => {\n    const rect = canvasRef.current.getBoundingClientRect();\n    const x = Math.floor((e.clientX - rect.left) / CELL_WIDTH);\n    const y = Math.floor((e.clientY - rect.top) / CELL_HEIGHT);\n    setHoveredCell({\n      x,\n      y\n    });\n  };\n  const handleClick = () => {\n    if (hoveredCell) {\n      const isClaimed = mockClaims.some(cell => cell.x === hoveredCell.x && cell.y === hoveredCell.y);\n      alert(`Cell (${hoveredCell.x}, ${hoveredCell.y}) is ${isClaimed ? \"CLAIMED\" : \"AVAILABLE\"}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Million Pixel Booker T. Washington\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      onMouseMove: handleMouseMove,\n      onClick: handleClick,\n      style: {\n        border: \"1px solid black\",\n        maxWidth: \"100%\",\n        height: \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), hoveredCell && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hovering over cell: (\", hoveredCell.x, \", \", hoveredCell.y, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8oieWeiolDtuQsKE/QJqEIMLYXk=\");\n_c = App;\nfunction generateMockClaims() {\n  const claims = [];\n  for (let i = 0; i < 300; i++) {\n    claims.push({\n      x: Math.floor(Math.random() * GRID_COLUMNS),\n      y: Math.floor(Math.random() * GRID_ROWS)\n    });\n  }\n  return claims;\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","useState","imageSrc","jsxDEV","_jsxDEV","GRID_COLUMNS","GRID_ROWS","CANVAS_WIDTH","CANVAS_HEIGHT","CELL_WIDTH","CELL_HEIGHT","App","_s","canvasRef","hoveredCell","setHoveredCell","mockClaims","setMockClaims","generateMockClaims","canvas","current","ctx","getContext","img","Image","src","onload","drawImage","drawGrid","strokeStyle","i","beginPath","moveTo","lineTo","stroke","j","forEach","x","y","fillStyle","fillRect","handleMouseMove","e","rect","getBoundingClientRect","Math","floor","clientX","left","clientY","top","handleClick","isClaimed","some","cell","alert","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","onMouseMove","onClick","border","maxWidth","_c","claims","push","random","$RefreshReg$"],"sources":["/Users/jonathandowdell/Workstation/React/million-pixel-app/src/App.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport imageSrc from \"./booker-t-washington.jpg\"; // Place 1080p image here\n\nconst GRID_COLUMNS = 100; // Width divisions\nconst GRID_ROWS = 100; // Height divisions\nconst CANVAS_WIDTH = 1920;\nconst CANVAS_HEIGHT = 1080;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\n\nfunction App() {\n  const canvasRef = useRef(null);\n  const [hoveredCell, setHoveredCell] = useState(null);\n  const [mockClaims, setMockClaims] = useState(generateMockClaims());\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      drawGrid(ctx);\n    };\n  }, [mockClaims]);\n\n  const drawGrid = (ctx) => {\n    ctx.strokeStyle = \"rgba(0,0,0,0.3)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n\n    mockClaims.forEach(({ x, y }) => {\n      ctx.fillStyle = \"rgba(255,0,0,0.4)\";\n      ctx.fillRect(x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT);\n    });\n  };\n\n  const handleMouseMove = (e) => {\n    const rect = canvasRef.current.getBoundingClientRect();\n    const x = Math.floor((e.clientX - rect.left) / CELL_WIDTH);\n    const y = Math.floor((e.clientY - rect.top) / CELL_HEIGHT);\n    setHoveredCell({ x, y });\n  };\n\n  const handleClick = () => {\n    if (hoveredCell) {\n      const isClaimed = mockClaims.some(\n        (cell) => cell.x === hoveredCell.x && cell.y === hoveredCell.y\n      );\n      alert(\n        `Cell (${hoveredCell.x}, ${hoveredCell.y}) is ${\n          isClaimed ? \"CLAIMED\" : \"AVAILABLE\"\n        }`\n      );\n    }\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n      <h1>Million Pixel Booker T. Washington</h1>\n      <canvas\n        ref={canvasRef}\n        width={CANVAS_WIDTH}\n        height={CANVAS_HEIGHT}\n        onMouseMove={handleMouseMove}\n        onClick={handleClick}\n        style={{ border: \"1px solid black\", maxWidth: \"100%\", height: \"auto\" }}\n      />\n      {hoveredCell && (\n        <p>\n          Hovering over cell: ({hoveredCell.x}, {hoveredCell.y})\n        </p>\n      )}\n    </div>\n  );\n}\n\nfunction generateMockClaims() {\n  const claims = [];\n  for (let i = 0; i < 300; i++) {\n    claims.push({\n      x: Math.floor(Math.random() * GRID_COLUMNS),\n      y: Math.floor(Math.random() * GRID_ROWS),\n    });\n  }\n  return claims;\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}