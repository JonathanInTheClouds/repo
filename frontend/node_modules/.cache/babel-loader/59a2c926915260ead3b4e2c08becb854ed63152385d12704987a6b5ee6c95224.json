{"ast":null,"code":"var _jsxFileName = \"/Users/jonathandowdell/Workstation/React/million-pixel-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport imageSrc from \"./Banner Hi Rez.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1495;\nconst CANVAS_HEIGHT = 1024;\nconst GRID_COLUMNS = 50;\nconst GRID_ROWS = 50;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\nfunction App() {\n  _s();\n  const canvasRef = useRef(null);\n  const [revealedCells, setRevealedCells] = useState([]);\n  useEffect(() => {\n    drawCanvas();\n  }, [revealedCells]);\n  const drawCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      const imageData = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const avg = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\n        imageData.data[i] = avg;\n        imageData.data[i + 1] = avg;\n        imageData.data[i + 2] = avg;\n      }\n      ctx.putImageData(imageData, 0, 0);\n      revealedCells.forEach(({\n        x,\n        y\n      }) => {\n        ctx.drawImage(img, x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT, x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT);\n      });\n      drawGrid(ctx);\n    };\n  };\n  const drawGrid = ctx => {\n    ctx.strokeStyle = \"rgba(255,255,255,0.3)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n  };\n  const simulateFill = () => {\n    const totalCells = GRID_COLUMNS * GRID_ROWS;\n    const unrevealedCells = [];\n    for (let x = 0; x < GRID_COLUMNS; x++) {\n      for (let y = 0; y < GRID_ROWS; y++) {\n        if (!revealedCells.find(cell => cell.x === x && cell.y === y)) {\n          unrevealedCells.push({\n            x,\n            y\n          });\n        }\n      }\n    }\n    const interval = setInterval(() => {\n      if (unrevealedCells.length === 0) {\n        clearInterval(interval);\n        return;\n      }\n      const index = Math.floor(Math.random() * unrevealedCells.length);\n      const cell = unrevealedCells.splice(index, 1)[0];\n      setRevealedCells(prev => [...prev, cell]);\n    }, 50);\n  };\n  const handleCanvasClick = e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    const canvasX = (e.clientX - rect.left) * scaleX;\n    const canvasY = (e.clientY - rect.top) * scaleY;\n    const x = Math.floor(canvasX / CELL_WIDTH);\n    const y = Math.floor(canvasY / CELL_HEIGHT);\n    if (!revealedCells.find(cell => cell.x === x && cell.y === y)) {\n      setRevealedCells([...revealedCells, {\n        x,\n        y\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: simulateFill,\n      style: {\n        marginBottom: \"10px\",\n        padding: \"10px 20px\"\n      },\n      children: \"Simulate Fill\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      onClick: handleCanvasClick,\n      style: {\n        border: \"2px solid #333\",\n        cursor: \"pointer\",\n        maxWidth: \"100%\",\n        height: \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HPEVmwI87qsWHW3pFq4P8/6Ll/s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","useState","imageSrc","jsxDEV","_jsxDEV","CANVAS_WIDTH","CANVAS_HEIGHT","GRID_COLUMNS","GRID_ROWS","CELL_WIDTH","CELL_HEIGHT","App","_s","canvasRef","revealedCells","setRevealedCells","drawCanvas","canvas","current","ctx","getContext","img","Image","src","onload","drawImage","imageData","getImageData","i","data","length","avg","putImageData","forEach","x","y","drawGrid","strokeStyle","beginPath","moveTo","lineTo","stroke","j","simulateFill","totalCells","unrevealedCells","find","cell","push","interval","setInterval","clearInterval","index","Math","floor","random","splice","prev","handleCanvasClick","e","rect","getBoundingClientRect","scaleX","width","scaleY","height","canvasX","clientX","left","canvasY","clientY","top","style","display","flexDirection","alignItems","padding","children","onClick","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","border","cursor","maxWidth","_c","$RefreshReg$"],"sources":["/Users/jonathandowdell/Workstation/React/million-pixel-app/src/App.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport imageSrc from \"./Banner Hi Rez.png\";\n\nconst CANVAS_WIDTH = 1495;\nconst CANVAS_HEIGHT = 1024;\nconst GRID_COLUMNS = 50;\nconst GRID_ROWS = 50;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\n\nfunction App() {\n  const canvasRef = useRef(null);\n  const [revealedCells, setRevealedCells] = useState([]);\n\n  useEffect(() => {\n    drawCanvas();\n  }, [revealedCells]);\n\n  const drawCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n      const imageData = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const avg =\n          (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) /\n          3;\n        imageData.data[i] = avg;\n        imageData.data[i + 1] = avg;\n        imageData.data[i + 2] = avg;\n      }\n      ctx.putImageData(imageData, 0, 0);\n\n      revealedCells.forEach(({ x, y }) => {\n        ctx.drawImage(\n          img,\n          x * CELL_WIDTH,\n          y * CELL_HEIGHT,\n          CELL_WIDTH,\n          CELL_HEIGHT,\n          x * CELL_WIDTH,\n          y * CELL_HEIGHT,\n          CELL_WIDTH,\n          CELL_HEIGHT\n        );\n      });\n\n      drawGrid(ctx);\n    };\n  };\n\n  const drawGrid = (ctx) => {\n    ctx.strokeStyle = \"rgba(255,255,255,0.3)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n  };\n\n  const simulateFill = () => {\n    const totalCells = GRID_COLUMNS * GRID_ROWS;\n    const unrevealedCells = [];\n\n    for (let x = 0; x < GRID_COLUMNS; x++) {\n      for (let y = 0; y < GRID_ROWS; y++) {\n        if (!revealedCells.find((cell) => cell.x === x && cell.y === y)) {\n          unrevealedCells.push({ x, y });\n        }\n      }\n    }\n\n    const interval = setInterval(() => {\n      if (unrevealedCells.length === 0) {\n        clearInterval(interval);\n        return;\n      }\n\n      const index = Math.floor(Math.random() * unrevealedCells.length);\n      const cell = unrevealedCells.splice(index, 1)[0];\n\n      setRevealedCells((prev) => [...prev, cell]);\n    }, 50);\n  };\n\n  const handleCanvasClick = (e) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    const canvasX = (e.clientX - rect.left) * scaleX;\n    const canvasY = (e.clientY - rect.top) * scaleY;\n\n    const x = Math.floor(canvasX / CELL_WIDTH);\n    const y = Math.floor(canvasY / CELL_HEIGHT);\n\n    if (!revealedCells.find((cell) => cell.x === x && cell.y === y)) {\n      setRevealedCells([...revealedCells, { x, y }]);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        padding: \"20px\",\n      }}\n    >\n      <button\n        onClick={simulateFill}\n        style={{ marginBottom: \"10px\", padding: \"10px 20px\" }}\n      >\n        Simulate Fill\n      </button>\n      <canvas\n        ref={canvasRef}\n        width={CANVAS_WIDTH}\n        height={CANVAS_HEIGHT}\n        onClick={handleCanvasClick}\n        style={{\n          border: \"2px solid #333\",\n          cursor: \"pointer\",\n          maxWidth: \"100%\",\n          height: \"auto\",\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}