{"ast":null,"code":"var _jsxFileName = \"/Users/jonathandowdell/Workstation/React/million-pixel-app/src/pages/CanvasPage.jsx\",\n  _import$meta,\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport imageSrc from \"../Banner Hi Rez.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = process.env.REACT_APP_API_BASE || ((_import$meta = import.meta) === null || _import$meta === void 0 ? void 0 : _import$meta.env) && import.meta.env.VITE_API_BASE || \"http://localhost:3001\";\nconst CANVAS_WIDTH = 1495;\nconst CANVAS_HEIGHT = 1024;\nconst GRID_COLUMNS = 200;\nconst GRID_ROWS = 200;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\n\n// highlight lifetime in ms\nconst HIGHLIGHT_MS = 4500;\nexport default function CanvasPage() {\n  _s();\n  const canvasRef = useRef(null);\n  const imgRef = useRef(null);\n  const rafRef = useRef(0);\n  const [imgReady, setImgReady] = useState(false);\n  const [revealedCells, setRevealedCells] = useState([]);\n  // highlights: { id, cells, centroid, message, amountCents, t0 }\n  const [highlights, setHighlights] = useState([]);\n\n  // load image once\n  useEffect(() => {\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      imgRef.current = img;\n      setImgReady(true);\n    };\n    img.onerror = () => console.error(\"Failed to load canvas image\");\n  }, []);\n\n  // sockets + bootstrap\n  useEffect(() => {\n    const socket = io(API_BASE, {\n      transports: [\"websocket\"]\n    });\n    const merge = incoming => setRevealedCells(prev => {\n      const seen = new Set(prev.map(c => `${c.x},${c.y}`));\n      const out = [...prev];\n      for (const c of incoming) if (!seen.has(`${c.x},${c.y}`)) out.push(c);\n      return out;\n    });\n    fetch(`${API_BASE}/state`).then(r => r.json()).then(({\n      cells\n    }) => merge(cells)).catch(() => {});\n    socket.on(\"bootstrap\", ({\n      cells\n    }) => merge(cells));\n    socket.on(\"cells_revealed\", ({\n      cells,\n      message,\n      amountCents,\n      centroid,\n      cellsCount\n    }) => {\n      merge(cells || []);\n      // add a highlight even if cellsCount === 0 (message-only)\n      const id = Math.random().toString(36).slice(2);\n      setHighlights(h => [...h, {\n        id,\n        cells: cells || [],\n        centroid: centroid || null,\n        message: message || \"\",\n        amountCents: amountCents !== null && amountCents !== void 0 ? amountCents : 0,\n        t0: performance.now()\n      }]);\n    });\n    return () => {\n      socket.off(\"bootstrap\");\n      socket.off(\"cells_revealed\");\n      socket.disconnect();\n    };\n  }, []);\n\n  // animation loop\n  useEffect(() => {\n    const step = () => {\n      draw();\n      rafRef.current = requestAnimationFrame(step);\n    };\n    rafRef.current = requestAnimationFrame(step);\n    return () => cancelAnimationFrame(rafRef.current);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [imgReady, revealedCells, highlights]);\n  const totalCells = GRID_COLUMNS * GRID_ROWS;\n  const remaining = Math.max(totalCells - revealedCells.length, 0);\n  function draw() {\n    const canvas = canvasRef.current;\n    const img = imgRef.current;\n    if (!canvas || !img) return;\n    const ctx = canvas.getContext(\"2d\");\n\n    // base grayscale\n    ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    const imageData = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    const data = imageData.data;\n    for (let i = 0; i < data.length; i += 4) {\n      const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n      data[i] = avg;\n      data[i + 1] = avg;\n      data[i + 2] = avg;\n    }\n    ctx.putImageData(imageData, 0, 0);\n\n    // paint colored revealed cells\n    for (let k = 0; k < revealedCells.length; k++) {\n      const {\n        x,\n        y\n      } = revealedCells[k];\n      ctx.drawImage(img, x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT, x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT);\n    }\n\n    // pulse overlay for highlights\n    const now = performance.now();\n    const active = [];\n    for (const h of highlights) {\n      const age = now - h.t0;\n      if (age < HIGHLIGHT_MS) {\n        active.push(h);\n        // 0 → 1 → 0 easing (pulse)\n        const t = age / HIGHLIGHT_MS;\n        const pulse = Math.sin(Math.PI * t);\n        const alpha = 0.35 * pulse;\n\n        // glow per highlighted cell\n        if (h.cells && h.cells.length) {\n          ctx.save();\n          ctx.globalAlpha = alpha;\n          ctx.fillStyle = \"#22c55e\";\n          for (const c of h.cells) {\n            ctx.fillRect(c.x * CELL_WIDTH, c.y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT);\n          }\n          ctx.restore();\n        }\n\n        // centroid ring + message bubble (even if cells==[])\n        if (h.centroid) {\n          var _h$cells;\n          const cx = (h.centroid.x + 0.5) * CELL_WIDTH;\n          const cy = (h.centroid.y + 0.5) * CELL_HEIGHT;\n          // ring\n          ctx.save();\n          ctx.lineWidth = 3;\n          ctx.strokeStyle = `rgba(34,197,94,${0.6 * pulse})`;\n          const radius = 14 + 6 * pulse;\n          ctx.beginPath();\n          ctx.arc(cx, cy, radius, 0, Math.PI * 2);\n          ctx.stroke();\n          ctx.restore();\n\n          // bubble\n          const cellsCount = ((_h$cells = h.cells) === null || _h$cells === void 0 ? void 0 : _h$cells.length) || 0;\n          const amount = h.amountCents ? `$${(h.amountCents / 100).toFixed(2)}` : \"\";\n          const text = h.message ? `${h.message}${cellsCount ? ` (+${cellsCount} ${cellsCount === 1 ? \"cell\" : \"cells\"})` : \"\"}` : cellsCount ? `+${cellsCount} ${cellsCount === 1 ? \"cell\" : \"cells\"}` : amount || \"Thanks!\";\n          drawBubble(ctx, cx, cy - 28, text, 8, 0.92);\n        } else if (h.message) {\n          // no centroid (e.g., <$25): show bubble near bottom center\n          drawBubble(ctx, CANVAS_WIDTH / 2, CANVAS_HEIGHT - 40, h.message, 8, 0.9, true);\n        }\n      }\n    }\n    // prune expired\n    if (active.length !== highlights.length) {\n      setHighlights(active);\n    }\n\n    // grid overlay\n    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n\n    // header (simple)\n    ctx.save();\n    ctx.fillStyle = \"rgba(15,23,42,0.75)\";\n    ctx.fillRect(10, 10, 220, 44);\n    ctx.fillStyle = \"#e2e8f0\";\n    ctx.font = \"bold 16px system-ui, -apple-system, Segoe UI, Roboto\";\n    ctx.fillText(\"Million Pixel Reveal\", 20, 32);\n    ctx.font = \"12px system-ui, -apple-system, Segoe UI, Roboto\";\n    ctx.fillText(`Remaining: ${remaining}`, 20, 48);\n    ctx.restore();\n  }\n  function drawBubble(ctx, x, y, text, pad = 8, alpha = 0.92, center = false) {\n    ctx.save();\n    ctx.font = \"12px system-ui, -apple-system, Segoe UI, Roboto\";\n    const maxWidth = 420;\n    // simple wrap\n    const words = String(text).slice(0, 120).split(/\\s+/);\n    const lines = [];\n    let line = \"\";\n    for (const w of words) {\n      const test = line ? line + \" \" + w : w;\n      if (ctx.measureText(test).width > maxWidth) {\n        lines.push(line);\n        line = w;\n      } else line = test;\n    }\n    if (line) lines.push(line);\n    const lineHeight = 16;\n    const w = Math.min(Math.max(...lines.map(l => ctx.measureText(l).width)) + pad * 2, maxWidth + pad * 2) || 80;\n    const h = lines.length * lineHeight + pad * 2;\n    const left = center ? x - w / 2 : x - w / 2;\n    const top = y - h;\n\n    // panel\n    ctx.globalAlpha = alpha;\n    ctx.fillStyle = \"rgba(15,23,42,0.96)\";\n    roundRect(ctx, left, top, w, h, 10);\n    ctx.fill();\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = \"rgba(51,65,85,1)\";\n    ctx.lineWidth = 1;\n    roundRect(ctx, left, top, w, h, 10);\n    ctx.stroke();\n\n    // text\n    ctx.fillStyle = \"#e2e8f0\";\n    for (let i = 0; i < lines.length; i++) {\n      ctx.fillText(lines[i], left + pad, top + pad + (i + 1) * lineHeight - 4);\n    }\n    ctx.restore();\n  }\n  function roundRect(ctx, x, y, w, h, r) {\n    const rr = Math.min(r, w / 2, h / 2);\n    ctx.beginPath();\n    ctx.moveTo(x + rr, y);\n    ctx.arcTo(x + w, y, x + w, y + h, rr);\n    ctx.arcTo(x + w, y + h, x, y + h, rr);\n    ctx.arcTo(x, y + h, x, y, rr);\n    ctx.arcTo(x, y, x + w, y, rr);\n    ctx.closePath();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"grid\",\n      placeItems: \"center\",\n      padding: 20\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      style: {\n        border: \"2px solid #334155\",\n        borderRadius: 12,\n        boxShadow: \"0 4px 12px rgba(0,0,0,0.5)\",\n        maxWidth: \"100%\",\n        height: \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this);\n}\n_s(CanvasPage, \"gzk1g3Pw/ts2NC1GHiuLqoM/d7w=\");\n_c = CanvasPage;\nvar _c;\n$RefreshReg$(_c, \"CanvasPage\");","map":{"version":3,"names":["React","useRef","useEffect","useState","io","imageSrc","jsxDEV","_jsxDEV","API_BASE","process","env","REACT_APP_API_BASE","_import$meta","import","meta","VITE_API_BASE","CANVAS_WIDTH","CANVAS_HEIGHT","GRID_COLUMNS","GRID_ROWS","CELL_WIDTH","CELL_HEIGHT","HIGHLIGHT_MS","CanvasPage","_s","canvasRef","imgRef","rafRef","imgReady","setImgReady","revealedCells","setRevealedCells","highlights","setHighlights","img","Image","src","onload","current","onerror","console","error","socket","transports","merge","incoming","prev","seen","Set","map","c","x","y","out","has","push","fetch","then","r","json","cells","catch","on","message","amountCents","centroid","cellsCount","id","Math","random","toString","slice","h","t0","performance","now","off","disconnect","step","draw","requestAnimationFrame","cancelAnimationFrame","totalCells","remaining","max","length","canvas","ctx","getContext","clearRect","drawImage","imageData","getImageData","data","i","avg","putImageData","k","active","age","t","pulse","sin","PI","alpha","save","globalAlpha","fillStyle","fillRect","restore","_h$cells","cx","cy","lineWidth","strokeStyle","radius","beginPath","arc","stroke","amount","toFixed","text","drawBubble","moveTo","lineTo","j","font","fillText","pad","center","maxWidth","words","String","split","lines","line","w","test","measureText","width","lineHeight","min","l","left","top","roundRect","fill","rr","arcTo","closePath","style","display","placeItems","padding","children","ref","height","border","borderRadius","boxShadow","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jonathandowdell/Workstation/React/million-pixel-app/src/pages/CanvasPage.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport imageSrc from \"../Banner Hi Rez.png\";\n\nconst API_BASE =\n  process.env.REACT_APP_API_BASE ||\n  (import.meta?.env && import.meta.env.VITE_API_BASE) ||\n  \"http://localhost:3001\";\n\nconst CANVAS_WIDTH = 1495;\nconst CANVAS_HEIGHT = 1024;\nconst GRID_COLUMNS = 200;\nconst GRID_ROWS = 200;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\n\n// highlight lifetime in ms\nconst HIGHLIGHT_MS = 4500;\n\nexport default function CanvasPage() {\n  const canvasRef = useRef(null);\n  const imgRef = useRef(null);\n  const rafRef = useRef(0);\n\n  const [imgReady, setImgReady] = useState(false);\n  const [revealedCells, setRevealedCells] = useState([]);\n  // highlights: { id, cells, centroid, message, amountCents, t0 }\n  const [highlights, setHighlights] = useState([]);\n\n  // load image once\n  useEffect(() => {\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      imgRef.current = img;\n      setImgReady(true);\n    };\n    img.onerror = () => console.error(\"Failed to load canvas image\");\n  }, []);\n\n  // sockets + bootstrap\n  useEffect(() => {\n    const socket = io(API_BASE, { transports: [\"websocket\"] });\n\n    const merge = (incoming) =>\n      setRevealedCells((prev) => {\n        const seen = new Set(prev.map((c) => `${c.x},${c.y}`));\n        const out = [...prev];\n        for (const c of incoming) if (!seen.has(`${c.x},${c.y}`)) out.push(c);\n        return out;\n      });\n\n    fetch(`${API_BASE}/state`)\n      .then((r) => r.json())\n      .then(({ cells }) => merge(cells))\n      .catch(() => {});\n\n    socket.on(\"bootstrap\", ({ cells }) => merge(cells));\n    socket.on(\n      \"cells_revealed\",\n      ({ cells, message, amountCents, centroid, cellsCount }) => {\n        merge(cells || []);\n        // add a highlight even if cellsCount === 0 (message-only)\n        const id = Math.random().toString(36).slice(2);\n        setHighlights((h) => [\n          ...h,\n          {\n            id,\n            cells: cells || [],\n            centroid: centroid || null,\n            message: message || \"\",\n            amountCents: amountCents ?? 0,\n            t0: performance.now(),\n          },\n        ]);\n      }\n    );\n\n    return () => {\n      socket.off(\"bootstrap\");\n      socket.off(\"cells_revealed\");\n      socket.disconnect();\n    };\n  }, []);\n\n  // animation loop\n  useEffect(() => {\n    const step = () => {\n      draw();\n      rafRef.current = requestAnimationFrame(step);\n    };\n    rafRef.current = requestAnimationFrame(step);\n    return () => cancelAnimationFrame(rafRef.current);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [imgReady, revealedCells, highlights]);\n\n  const totalCells = GRID_COLUMNS * GRID_ROWS;\n  const remaining = Math.max(totalCells - revealedCells.length, 0);\n\n  function draw() {\n    const canvas = canvasRef.current;\n    const img = imgRef.current;\n    if (!canvas || !img) return;\n    const ctx = canvas.getContext(\"2d\");\n\n    // base grayscale\n    ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n    const imageData = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    const data = imageData.data;\n    for (let i = 0; i < data.length; i += 4) {\n      const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n      data[i] = avg;\n      data[i + 1] = avg;\n      data[i + 2] = avg;\n    }\n    ctx.putImageData(imageData, 0, 0);\n\n    // paint colored revealed cells\n    for (let k = 0; k < revealedCells.length; k++) {\n      const { x, y } = revealedCells[k];\n      ctx.drawImage(\n        img,\n        x * CELL_WIDTH,\n        y * CELL_HEIGHT,\n        CELL_WIDTH,\n        CELL_HEIGHT,\n        x * CELL_WIDTH,\n        y * CELL_HEIGHT,\n        CELL_WIDTH,\n        CELL_HEIGHT\n      );\n    }\n\n    // pulse overlay for highlights\n    const now = performance.now();\n    const active = [];\n    for (const h of highlights) {\n      const age = now - h.t0;\n      if (age < HIGHLIGHT_MS) {\n        active.push(h);\n        // 0 → 1 → 0 easing (pulse)\n        const t = age / HIGHLIGHT_MS;\n        const pulse = Math.sin(Math.PI * t);\n        const alpha = 0.35 * pulse;\n\n        // glow per highlighted cell\n        if (h.cells && h.cells.length) {\n          ctx.save();\n          ctx.globalAlpha = alpha;\n          ctx.fillStyle = \"#22c55e\";\n          for (const c of h.cells) {\n            ctx.fillRect(\n              c.x * CELL_WIDTH,\n              c.y * CELL_HEIGHT,\n              CELL_WIDTH,\n              CELL_HEIGHT\n            );\n          }\n          ctx.restore();\n        }\n\n        // centroid ring + message bubble (even if cells==[])\n        if (h.centroid) {\n          const cx = (h.centroid.x + 0.5) * CELL_WIDTH;\n          const cy = (h.centroid.y + 0.5) * CELL_HEIGHT;\n          // ring\n          ctx.save();\n          ctx.lineWidth = 3;\n          ctx.strokeStyle = `rgba(34,197,94,${0.6 * pulse})`;\n          const radius = 14 + 6 * pulse;\n          ctx.beginPath();\n          ctx.arc(cx, cy, radius, 0, Math.PI * 2);\n          ctx.stroke();\n          ctx.restore();\n\n          // bubble\n          const cellsCount = h.cells?.length || 0;\n          const amount = h.amountCents\n            ? `$${(h.amountCents / 100).toFixed(2)}`\n            : \"\";\n          const text = h.message\n            ? `${h.message}${\n                cellsCount\n                  ? ` (+${cellsCount} ${cellsCount === 1 ? \"cell\" : \"cells\"})`\n                  : \"\"\n              }`\n            : cellsCount\n            ? `+${cellsCount} ${cellsCount === 1 ? \"cell\" : \"cells\"}`\n            : amount || \"Thanks!\";\n          drawBubble(ctx, cx, cy - 28, text, 8, 0.92);\n        } else if (h.message) {\n          // no centroid (e.g., <$25): show bubble near bottom center\n          drawBubble(\n            ctx,\n            CANVAS_WIDTH / 2,\n            CANVAS_HEIGHT - 40,\n            h.message,\n            8,\n            0.9,\n            true\n          );\n        }\n      }\n    }\n    // prune expired\n    if (active.length !== highlights.length) {\n      setHighlights(active);\n    }\n\n    // grid overlay\n    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n\n    // header (simple)\n    ctx.save();\n    ctx.fillStyle = \"rgba(15,23,42,0.75)\";\n    ctx.fillRect(10, 10, 220, 44);\n    ctx.fillStyle = \"#e2e8f0\";\n    ctx.font = \"bold 16px system-ui, -apple-system, Segoe UI, Roboto\";\n    ctx.fillText(\"Million Pixel Reveal\", 20, 32);\n    ctx.font = \"12px system-ui, -apple-system, Segoe UI, Roboto\";\n    ctx.fillText(`Remaining: ${remaining}`, 20, 48);\n    ctx.restore();\n  }\n\n  function drawBubble(ctx, x, y, text, pad = 8, alpha = 0.92, center = false) {\n    ctx.save();\n    ctx.font = \"12px system-ui, -apple-system, Segoe UI, Roboto\";\n    const maxWidth = 420;\n    // simple wrap\n    const words = String(text).slice(0, 120).split(/\\s+/);\n    const lines = [];\n    let line = \"\";\n    for (const w of words) {\n      const test = line ? line + \" \" + w : w;\n      if (ctx.measureText(test).width > maxWidth) {\n        lines.push(line);\n        line = w;\n      } else line = test;\n    }\n    if (line) lines.push(line);\n\n    const lineHeight = 16;\n    const w =\n      Math.min(\n        Math.max(...lines.map((l) => ctx.measureText(l).width)) + pad * 2,\n        maxWidth + pad * 2\n      ) || 80;\n    const h = lines.length * lineHeight + pad * 2;\n\n    const left = center ? x - w / 2 : x - w / 2;\n    const top = y - h;\n\n    // panel\n    ctx.globalAlpha = alpha;\n    ctx.fillStyle = \"rgba(15,23,42,0.96)\";\n    roundRect(ctx, left, top, w, h, 10);\n    ctx.fill();\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = \"rgba(51,65,85,1)\";\n    ctx.lineWidth = 1;\n    roundRect(ctx, left, top, w, h, 10);\n    ctx.stroke();\n\n    // text\n    ctx.fillStyle = \"#e2e8f0\";\n    for (let i = 0; i < lines.length; i++) {\n      ctx.fillText(lines[i], left + pad, top + pad + (i + 1) * lineHeight - 4);\n    }\n    ctx.restore();\n  }\n\n  function roundRect(ctx, x, y, w, h, r) {\n    const rr = Math.min(r, w / 2, h / 2);\n    ctx.beginPath();\n    ctx.moveTo(x + rr, y);\n    ctx.arcTo(x + w, y, x + w, y + h, rr);\n    ctx.arcTo(x + w, y + h, x, y + h, rr);\n    ctx.arcTo(x, y + h, x, y, rr);\n    ctx.arcTo(x, y, x + w, y, rr);\n    ctx.closePath();\n  }\n\n  return (\n    <div style={{ display: \"grid\", placeItems: \"center\", padding: 20 }}>\n      <canvas\n        ref={canvasRef}\n        width={CANVAS_WIDTH}\n        height={CANVAS_HEIGHT}\n        style={{\n          border: \"2px solid #334155\",\n          borderRadius: 12,\n          boxShadow: \"0 4px 12px rgba(0,0,0,0.5)\",\n          maxWidth: \"100%\",\n          height: \"auto\",\n        }}\n      />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}