{"ast":null,"code":"var _jsxFileName = \"/Users/jonathandowdell/Workstation/React/million-pixel-app/src/App.js\",\n  _import$meta,\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport imageSrc from \"./Banner Hi Rez.png\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE = ((_import$meta = import.meta) === null || _import$meta === void 0 ? void 0 : _import$meta.env) && import.meta.env.VITE_API_BASE || process.env.REACT_APP_API_BASE || \"http://localhost:3001\";\nconst socket = io(API_BASE, {\n  transports: [\"websocket\"]\n});\nconst CANVAS_WIDTH = 1495;\nconst CANVAS_HEIGHT = 1024;\nconst GRID_COLUMNS = 100;\nconst GRID_ROWS = 100;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\nconst ENABLE_LOCAL_CONTROLS = false; // turn on only for local testing\n\nfunction App() {\n  _s();\n  const canvasRef = useRef(null);\n  const [revealedCells, setRevealedCells] = useState([]);\n  const [speed, setSpeed] = useState(100);\n  const [autoFilling, setAutoFilling] = useState(false);\n  const intervalRef = useRef(null);\n  const totalCells = GRID_COLUMNS * GRID_ROWS;\n\n  // ---- NEW: bootstrap + live updates from server ----\n  useEffect(() => {\n    const merge = incoming => setRevealedCells(prev => {\n      const seen = new Set(prev.map(c => `${c.x},${c.y}`));\n      const out = [...prev];\n      for (const c of incoming) if (!seen.has(`${c.x},${c.y}`)) out.push(c);\n      return out;\n    });\n    fetch(`${API_BASE}/state`).then(r => r.json()).then(({\n      cells\n    }) => merge(cells)).catch(() => {});\n    socket.on(\"bootstrap\", ({\n      cells\n    }) => merge(cells));\n    socket.on(\"cells_revealed\", ({\n      cells\n    }) => merge(cells));\n    return () => {\n      socket.off(\"bootstrap\");\n      socket.off(\"cells_revealed\");\n    };\n  }, []);\n  useEffect(() => {\n    drawCanvas();\n  }, [revealedCells]);\n  const drawCanvas = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      const imageData = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const avg = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\n        imageData.data[i] = avg;\n        imageData.data[i + 1] = avg;\n        imageData.data[i + 2] = avg;\n      }\n      ctx.putImageData(imageData, 0, 0);\n      revealedCells.forEach(({\n        x,\n        y\n      }) => {\n        ctx.drawImage(img, x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT, x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT);\n      });\n      drawGrid(ctx);\n    };\n  };\n  const drawGrid = ctx => {\n    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n  };\n\n  // --- Local testing controls (disabled by default) ---\n  const getAvailableCells = () => {\n    const available = [];\n    for (let x = 0; x < GRID_COLUMNS; x++) {\n      for (let y = 0; y < GRID_ROWS; y++) {\n        if (!revealedCells.find(cell => cell.x === x && cell.y === y)) {\n          available.push({\n            x,\n            y\n          });\n        }\n      }\n    }\n    return available;\n  };\n  const getNeighbors = (currentGroup, available) => {\n    const neighbors = [];\n    currentGroup.forEach(({\n      x,\n      y\n    }) => {\n      const possible = [{\n        x: x + 1,\n        y\n      }, {\n        x: x - 1,\n        y\n      }, {\n        x,\n        y: y + 1\n      }, {\n        x,\n        y: y - 1\n      }];\n      possible.forEach(cell => {\n        if (cell.x >= 0 && cell.y >= 0 && cell.x < GRID_COLUMNS && cell.y < GRID_ROWS && available.find(a => a.x === cell.x && a.y === cell.y) && !currentGroup.find(g => g.x === cell.x && g.y === cell.y)) {\n          neighbors.push(cell);\n        }\n      });\n    });\n    return neighbors;\n  };\n  const revealBulkCells = quantity => {\n    if (!ENABLE_LOCAL_CONTROLS) return;\n    const available = getAvailableCells();\n    if (available.length === 0) return;\n    const start = available[Math.floor(Math.random() * available.length)];\n    const group = [start];\n    while (group.length < quantity && group.length < available.length) {\n      const neighbors = getNeighbors(group, available);\n      if (neighbors.length === 0) {\n        const remaining = available.filter(a => !group.find(g => g.x === a.x && g.y === a.y));\n        if (remaining.length === 0) break;\n        group.push(remaining[Math.floor(Math.random() * remaining.length)]);\n      } else {\n        const next = neighbors[Math.floor(Math.random() * neighbors.length)];\n        group.push(next);\n      }\n    }\n    setRevealedCells(prev => [...prev, ...group]);\n  };\n  const handleCanvasClick = e => {\n    if (!ENABLE_LOCAL_CONTROLS) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = CANVAS_WIDTH / rect.width;\n    const scaleY = CANVAS_HEIGHT / rect.height;\n    const px = (e.clientX - rect.left) * scaleX;\n    const py = (e.clientY - rect.top) * scaleY;\n    const x = Math.floor(px / CELL_WIDTH);\n    const y = Math.floor(py / CELL_HEIGHT);\n    if (x < 0 || y < 0 || x >= GRID_COLUMNS || y >= GRID_ROWS) return;\n    setRevealedCells(prev => prev.some(c => c.x === x && c.y === y) ? prev : [...prev, {\n      x,\n      y\n    }]);\n  };\n  const startAutoFill = () => {\n    if (!ENABLE_LOCAL_CONTROLS) return;\n    if (intervalRef.current) return;\n    setAutoFilling(true);\n    intervalRef.current = setInterval(() => {\n      if (getAvailableCells().length === 0) {\n        stopAutoFill();\n        return;\n      }\n      revealBulkCells(1);\n    }, speed);\n  };\n  const stopAutoFill = () => {\n    if (!ENABLE_LOCAL_CONTROLS) return;\n    clearInterval(intervalRef.current);\n    intervalRef.current = null;\n    setAutoFilling(false);\n  };\n  const remainingCells = Math.max(totalCells - revealedCells.length, 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: \"Arial, sans-serif\",\n      backgroundColor: \"#1e293b\",\n      minHeight: \"100vh\",\n      color: \"#e2e8f0\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Million Pixel Reveal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cells Remaining: \", remainingCells]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), ENABLE_LOCAL_CONTROLS && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => revealBulkCells(1),\n          style: {\n            marginRight: \"10px\",\n            padding: \"10px 20px\"\n          },\n          children: \"Reveal 1 Cell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => revealBulkCells(5),\n          style: {\n            marginRight: \"10px\",\n            padding: \"10px 20px\"\n          },\n          children: \"Reveal 5 Cells\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => revealBulkCells(10),\n          style: {\n            marginRight: \"10px\",\n            padding: \"10px 20px\"\n          },\n          children: \"Reveal 10 Cells\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startAutoFill,\n          style: {\n            marginRight: \"10px\",\n            padding: \"10px 20px\",\n            backgroundColor: \"#16a34a\",\n            color: \"white\"\n          },\n          children: \"Start Auto Fill\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopAutoFill,\n          style: {\n            padding: \"10px 20px\",\n            backgroundColor: \"#dc2626\",\n            color: \"white\"\n          },\n          children: \"Stop Auto Fill\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Speed: \", speed, \"ms\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"10\",\n          max: \"1000\",\n          step: \"10\",\n          value: speed,\n          onChange: e => setSpeed(Number(e.target.value)),\n          style: {\n            marginLeft: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      onClick: handleCanvasClick,\n      style: {\n        border: \"2px solid #334155\",\n        borderRadius: \"12px\",\n        boxShadow: \"0 4px 12px rgba(0,0,0,0.5)\",\n        cursor: ENABLE_LOCAL_CONTROLS ? \"pointer\" : \"default\",\n        maxWidth: \"100%\",\n        height: \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"61QT9bOYSZ1DqpdpmFW6l69HzjY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","useState","io","imageSrc","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE","_import$meta","import","meta","env","VITE_API_BASE","process","REACT_APP_API_BASE","socket","transports","CANVAS_WIDTH","CANVAS_HEIGHT","GRID_COLUMNS","GRID_ROWS","CELL_WIDTH","CELL_HEIGHT","ENABLE_LOCAL_CONTROLS","App","_s","canvasRef","revealedCells","setRevealedCells","speed","setSpeed","autoFilling","setAutoFilling","intervalRef","totalCells","merge","incoming","prev","seen","Set","map","c","x","y","out","has","push","fetch","then","r","json","cells","catch","on","off","drawCanvas","canvas","current","ctx","getContext","img","Image","src","onload","drawImage","imageData","getImageData","i","data","length","avg","putImageData","forEach","drawGrid","strokeStyle","beginPath","moveTo","lineTo","stroke","j","getAvailableCells","available","find","cell","getNeighbors","currentGroup","neighbors","possible","a","g","revealBulkCells","quantity","start","Math","floor","random","group","remaining","filter","next","handleCanvasClick","e","rect","getBoundingClientRect","scaleX","width","scaleY","height","px","clientX","left","py","clientY","top","some","startAutoFill","setInterval","stopAutoFill","clearInterval","remainingCells","max","style","fontFamily","backgroundColor","minHeight","color","display","flexDirection","alignItems","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","onClick","marginRight","type","min","step","value","onChange","Number","target","marginLeft","ref","border","borderRadius","boxShadow","cursor","maxWidth","_c","$RefreshReg$"],"sources":["/Users/jonathandowdell/Workstation/React/million-pixel-app/src/App.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport imageSrc from \"./Banner Hi Rez.png\";\n\nconst API_BASE =\n  (import.meta?.env && import.meta.env.VITE_API_BASE) ||\n  process.env.REACT_APP_API_BASE ||\n  \"http://localhost:3001\";\n\nconst socket = io(API_BASE, { transports: [\"websocket\"] });\n\nconst CANVAS_WIDTH = 1495;\nconst CANVAS_HEIGHT = 1024;\nconst GRID_COLUMNS = 100;\nconst GRID_ROWS = 100;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\n\nconst ENABLE_LOCAL_CONTROLS = false; // turn on only for local testing\n\nfunction App() {\n  const canvasRef = useRef(null);\n  const [revealedCells, setRevealedCells] = useState([]);\n  const [speed, setSpeed] = useState(100);\n  const [autoFilling, setAutoFilling] = useState(false);\n  const intervalRef = useRef(null);\n  const totalCells = GRID_COLUMNS * GRID_ROWS;\n\n  // ---- NEW: bootstrap + live updates from server ----\n  useEffect(() => {\n    const merge = (incoming) =>\n      setRevealedCells((prev) => {\n        const seen = new Set(prev.map((c) => `${c.x},${c.y}`));\n        const out = [...prev];\n        for (const c of incoming) if (!seen.has(`${c.x},${c.y}`)) out.push(c);\n        return out;\n      });\n\n    fetch(`${API_BASE}/state`)\n      .then((r) => r.json())\n      .then(({ cells }) => merge(cells))\n      .catch(() => {});\n\n    socket.on(\"bootstrap\", ({ cells }) => merge(cells));\n    socket.on(\"cells_revealed\", ({ cells }) => merge(cells));\n\n    return () => {\n      socket.off(\"bootstrap\");\n      socket.off(\"cells_revealed\");\n    };\n  }, []);\n\n  useEffect(() => {\n    drawCanvas();\n  }, [revealedCells]);\n\n  const drawCanvas = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n      const imageData = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const avg =\n          (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) /\n          3;\n        imageData.data[i] = avg;\n        imageData.data[i + 1] = avg;\n        imageData.data[i + 2] = avg;\n      }\n      ctx.putImageData(imageData, 0, 0);\n\n      revealedCells.forEach(({ x, y }) => {\n        ctx.drawImage(\n          img,\n          x * CELL_WIDTH,\n          y * CELL_HEIGHT,\n          CELL_WIDTH,\n          CELL_HEIGHT,\n          x * CELL_WIDTH,\n          y * CELL_HEIGHT,\n          CELL_WIDTH,\n          CELL_HEIGHT\n        );\n      });\n\n      drawGrid(ctx);\n    };\n  };\n\n  const drawGrid = (ctx) => {\n    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n  };\n\n  // --- Local testing controls (disabled by default) ---\n  const getAvailableCells = () => {\n    const available = [];\n    for (let x = 0; x < GRID_COLUMNS; x++) {\n      for (let y = 0; y < GRID_ROWS; y++) {\n        if (!revealedCells.find((cell) => cell.x === x && cell.y === y)) {\n          available.push({ x, y });\n        }\n      }\n    }\n    return available;\n  };\n\n  const getNeighbors = (currentGroup, available) => {\n    const neighbors = [];\n    currentGroup.forEach(({ x, y }) => {\n      const possible = [\n        { x: x + 1, y },\n        { x: x - 1, y },\n        { x, y: y + 1 },\n        { x, y: y - 1 },\n      ];\n      possible.forEach((cell) => {\n        if (\n          cell.x >= 0 &&\n          cell.y >= 0 &&\n          cell.x < GRID_COLUMNS &&\n          cell.y < GRID_ROWS &&\n          available.find((a) => a.x === cell.x && a.y === cell.y) &&\n          !currentGroup.find((g) => g.x === cell.x && g.y === cell.y)\n        ) {\n          neighbors.push(cell);\n        }\n      });\n    });\n    return neighbors;\n  };\n\n  const revealBulkCells = (quantity) => {\n    if (!ENABLE_LOCAL_CONTROLS) return;\n    const available = getAvailableCells();\n    if (available.length === 0) return;\n\n    const start = available[Math.floor(Math.random() * available.length)];\n    const group = [start];\n\n    while (group.length < quantity && group.length < available.length) {\n      const neighbors = getNeighbors(group, available);\n      if (neighbors.length === 0) {\n        const remaining = available.filter(\n          (a) => !group.find((g) => g.x === a.x && g.y === a.y)\n        );\n        if (remaining.length === 0) break;\n        group.push(remaining[Math.floor(Math.random() * remaining.length)]);\n      } else {\n        const next = neighbors[Math.floor(Math.random() * neighbors.length)];\n        group.push(next);\n      }\n    }\n\n    setRevealedCells((prev) => [...prev, ...group]);\n  };\n\n  const handleCanvasClick = (e) => {\n    if (!ENABLE_LOCAL_CONTROLS) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n\n    const scaleX = CANVAS_WIDTH / rect.width;\n    const scaleY = CANVAS_HEIGHT / rect.height;\n\n    const px = (e.clientX - rect.left) * scaleX;\n    const py = (e.clientY - rect.top) * scaleY;\n\n    const x = Math.floor(px / CELL_WIDTH);\n    const y = Math.floor(py / CELL_HEIGHT);\n\n    if (x < 0 || y < 0 || x >= GRID_COLUMNS || y >= GRID_ROWS) return;\n    setRevealedCells((prev) =>\n      prev.some((c) => c.x === x && c.y === y) ? prev : [...prev, { x, y }]\n    );\n  };\n\n  const startAutoFill = () => {\n    if (!ENABLE_LOCAL_CONTROLS) return;\n    if (intervalRef.current) return;\n    setAutoFilling(true);\n    intervalRef.current = setInterval(() => {\n      if (getAvailableCells().length === 0) {\n        stopAutoFill();\n        return;\n      }\n      revealBulkCells(1);\n    }, speed);\n  };\n\n  const stopAutoFill = () => {\n    if (!ENABLE_LOCAL_CONTROLS) return;\n    clearInterval(intervalRef.current);\n    intervalRef.current = null;\n    setAutoFilling(false);\n  };\n\n  const remainingCells = Math.max(totalCells - revealedCells.length, 0);\n\n  return (\n    <div\n      style={{\n        fontFamily: \"Arial, sans-serif\",\n        backgroundColor: \"#1e293b\",\n        minHeight: \"100vh\",\n        color: \"#e2e8f0\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        padding: \"20px\",\n      }}\n    >\n      <h1>Million Pixel Reveal</h1>\n      <p>Cells Remaining: {remainingCells}</p>\n\n      {ENABLE_LOCAL_CONTROLS && (\n        <>\n          <div style={{ marginBottom: \"20px\" }}>\n            <button\n              onClick={() => revealBulkCells(1)}\n              style={{ marginRight: \"10px\", padding: \"10px 20px\" }}\n            >\n              Reveal 1 Cell\n            </button>\n            <button\n              onClick={() => revealBulkCells(5)}\n              style={{ marginRight: \"10px\", padding: \"10px 20px\" }}\n            >\n              Reveal 5 Cells\n            </button>\n            <button\n              onClick={() => revealBulkCells(10)}\n              style={{ marginRight: \"10px\", padding: \"10px 20px\" }}\n            >\n              Reveal 10 Cells\n            </button>\n            <button\n              onClick={startAutoFill}\n              style={{\n                marginRight: \"10px\",\n                padding: \"10px 20px\",\n                backgroundColor: \"#16a34a\",\n                color: \"white\",\n              }}\n            >\n              Start Auto Fill\n            </button>\n            <button\n              onClick={stopAutoFill}\n              style={{\n                padding: \"10px 20px\",\n                backgroundColor: \"#dc2626\",\n                color: \"white\",\n              }}\n            >\n              Stop Auto Fill\n            </button>\n          </div>\n          <div style={{ marginBottom: \"20px\" }}>\n            <label>Speed: {speed}ms</label>\n            <input\n              type=\"range\"\n              min=\"10\"\n              max=\"1000\"\n              step=\"10\"\n              value={speed}\n              onChange={(e) => setSpeed(Number(e.target.value))}\n              style={{ marginLeft: \"10px\" }}\n            />\n          </div>\n        </>\n      )}\n\n      <canvas\n        ref={canvasRef}\n        width={CANVAS_WIDTH}\n        height={CANVAS_HEIGHT}\n        onClick={handleCanvasClick}\n        style={{\n          border: \"2px solid #334155\",\n          borderRadius: \"12px\",\n          boxShadow: \"0 4px 12px rgba(0,0,0,0.5)\",\n          cursor: ENABLE_LOCAL_CONTROLS ? \"pointer\" : \"default\",\n          maxWidth: \"100%\",\n          height: \"auto\",\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}