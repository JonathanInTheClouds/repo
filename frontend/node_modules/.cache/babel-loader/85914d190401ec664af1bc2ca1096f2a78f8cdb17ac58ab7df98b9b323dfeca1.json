{"ast":null,"code":"var _jsxFileName = \"/Users/jonathandowdell/Workstation/React/million-pixel-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport imageSrc from \"./Banner Hi Rez.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1495;\nconst CANVAS_HEIGHT = 1024;\nconst GRID_COLUMNS = 50;\nconst GRID_ROWS = 50;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\nfunction App() {\n  _s();\n  const canvasRef = useRef(null);\n  const [revealedCells, setRevealedCells] = useState([]);\n  useEffect(() => {\n    drawCanvas();\n  }, [revealedCells]);\n  const drawCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      const imageData = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const avg = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\n        imageData.data[i] = avg;\n        imageData.data[i + 1] = avg;\n        imageData.data[i + 2] = avg;\n      }\n      ctx.putImageData(imageData, 0, 0);\n      revealedCells.forEach(({\n        x,\n        y\n      }) => {\n        ctx.drawImage(img, x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT, x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT);\n      });\n      drawGrid(ctx);\n    };\n  };\n  const drawGrid = ctx => {\n    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n  };\n  const getAvailableCells = () => {\n    const available = [];\n    for (let x = 0; x < GRID_COLUMNS; x++) {\n      for (let y = 0; y < GRID_ROWS; y++) {\n        if (!revealedCells.find(cell => cell.x === x && cell.y === y)) {\n          available.push({\n            x,\n            y\n          });\n        }\n      }\n    }\n    return available;\n  };\n  const revealBulkCells = quantity => {\n    const available = getAvailableCells();\n    if (available.length < quantity) return;\n    const start = available[Math.floor(Math.random() * available.length)];\n    const group = [start];\n    while (group.length < quantity) {\n      const neighbors = getNeighbors(group, available);\n      if (neighbors.length === 0) break;\n      const next = neighbors[Math.floor(Math.random() * neighbors.length)];\n      group.push(next);\n    }\n    setRevealedCells(prev => [...prev, ...group]);\n  };\n  const getNeighbors = (currentGroup, available) => {\n    const neighbors = [];\n    currentGroup.forEach(({\n      x,\n      y\n    }) => {\n      const possible = [{\n        x: x + 1,\n        y\n      }, {\n        x: x - 1,\n        y\n      }, {\n        x,\n        y: y + 1\n      }, {\n        x,\n        y: y - 1\n      }];\n      possible.forEach(cell => {\n        if (cell.x >= 0 && cell.y >= 0 && cell.x < GRID_COLUMNS && cell.y < GRID_ROWS && available.find(a => a.x === cell.x && a.y === cell.y) && !currentGroup.find(g => g.x === cell.x && g.y === cell.y)) {\n          neighbors.push(cell);\n        }\n      });\n    });\n    return neighbors;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: \"Arial, sans-serif\",\n      backgroundColor: \"#1e293b\",\n      minHeight: \"100vh\",\n      color: \"#e2e8f0\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Million Pixel Reveal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => revealBulkCells(5),\n        style: {\n          marginRight: \"10px\",\n          padding: \"10px 20px\"\n        },\n        children: \"Reveal 5 Cells\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => revealBulkCells(10),\n        style: {\n          padding: \"10px 20px\"\n        },\n        children: \"Reveal 10 Cells\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      style: {\n        border: \"2px solid #334155\",\n        borderRadius: \"12px\",\n        boxShadow: \"0 4px 12px rgba(0,0,0,0.5)\",\n        cursor: \"pointer\",\n        maxWidth: \"100%\",\n        height: \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HPEVmwI87qsWHW3pFq4P8/6Ll/s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","useState","imageSrc","jsxDEV","_jsxDEV","CANVAS_WIDTH","CANVAS_HEIGHT","GRID_COLUMNS","GRID_ROWS","CELL_WIDTH","CELL_HEIGHT","App","_s","canvasRef","revealedCells","setRevealedCells","drawCanvas","canvas","current","ctx","getContext","img","Image","src","onload","drawImage","imageData","getImageData","i","data","length","avg","putImageData","forEach","x","y","drawGrid","strokeStyle","beginPath","moveTo","lineTo","stroke","j","getAvailableCells","available","find","cell","push","revealBulkCells","quantity","start","Math","floor","random","group","neighbors","getNeighbors","next","prev","currentGroup","possible","a","g","style","fontFamily","backgroundColor","minHeight","color","display","flexDirection","alignItems","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","onClick","marginRight","ref","width","height","border","borderRadius","boxShadow","cursor","maxWidth","_c","$RefreshReg$"],"sources":["/Users/jonathandowdell/Workstation/React/million-pixel-app/src/App.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport imageSrc from \"./Banner Hi Rez.png\";\n\nconst CANVAS_WIDTH = 1495;\nconst CANVAS_HEIGHT = 1024;\nconst GRID_COLUMNS = 50;\nconst GRID_ROWS = 50;\nconst CELL_WIDTH = CANVAS_WIDTH / GRID_COLUMNS;\nconst CELL_HEIGHT = CANVAS_HEIGHT / GRID_ROWS;\n\nfunction App() {\n  const canvasRef = useRef(null);\n  const [revealedCells, setRevealedCells] = useState([]);\n\n  useEffect(() => {\n    drawCanvas();\n  }, [revealedCells]);\n\n  const drawCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n      const imageData = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const avg =\n          (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) /\n          3;\n        imageData.data[i] = avg;\n        imageData.data[i + 1] = avg;\n        imageData.data[i + 2] = avg;\n      }\n      ctx.putImageData(imageData, 0, 0);\n\n      revealedCells.forEach(({ x, y }) => {\n        ctx.drawImage(\n          img,\n          x * CELL_WIDTH,\n          y * CELL_HEIGHT,\n          CELL_WIDTH,\n          CELL_HEIGHT,\n          x * CELL_WIDTH,\n          y * CELL_HEIGHT,\n          CELL_WIDTH,\n          CELL_HEIGHT\n        );\n      });\n\n      drawGrid(ctx);\n    };\n  };\n\n  const drawGrid = (ctx) => {\n    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n    for (let i = 0; i <= GRID_COLUMNS; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * CELL_WIDTH, 0);\n      ctx.lineTo(i * CELL_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n\n    for (let j = 0; j <= GRID_ROWS; j++) {\n      ctx.beginPath();\n      ctx.moveTo(0, j * CELL_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, j * CELL_HEIGHT);\n      ctx.stroke();\n    }\n  };\n\n  const getAvailableCells = () => {\n    const available = [];\n    for (let x = 0; x < GRID_COLUMNS; x++) {\n      for (let y = 0; y < GRID_ROWS; y++) {\n        if (!revealedCells.find((cell) => cell.x === x && cell.y === y)) {\n          available.push({ x, y });\n        }\n      }\n    }\n    return available;\n  };\n\n  const revealBulkCells = (quantity) => {\n    const available = getAvailableCells();\n    if (available.length < quantity) return;\n\n    const start = available[Math.floor(Math.random() * available.length)];\n    const group = [start];\n\n    while (group.length < quantity) {\n      const neighbors = getNeighbors(group, available);\n      if (neighbors.length === 0) break;\n      const next = neighbors[Math.floor(Math.random() * neighbors.length)];\n      group.push(next);\n    }\n\n    setRevealedCells((prev) => [...prev, ...group]);\n  };\n\n  const getNeighbors = (currentGroup, available) => {\n    const neighbors = [];\n    currentGroup.forEach(({ x, y }) => {\n      const possible = [\n        { x: x + 1, y },\n        { x: x - 1, y },\n        { x, y: y + 1 },\n        { x, y: y - 1 },\n      ];\n      possible.forEach((cell) => {\n        if (\n          cell.x >= 0 &&\n          cell.y >= 0 &&\n          cell.x < GRID_COLUMNS &&\n          cell.y < GRID_ROWS &&\n          available.find((a) => a.x === cell.x && a.y === cell.y) &&\n          !currentGroup.find((g) => g.x === cell.x && g.y === cell.y)\n        ) {\n          neighbors.push(cell);\n        }\n      });\n    });\n    return neighbors;\n  };\n\n  return (\n    <div\n      style={{\n        fontFamily: \"Arial, sans-serif\",\n        backgroundColor: \"#1e293b\",\n        minHeight: \"100vh\",\n        color: \"#e2e8f0\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        padding: \"20px\",\n      }}\n    >\n      <h1>Million Pixel Reveal</h1>\n      <div style={{ marginBottom: \"20px\" }}>\n        <button\n          onClick={() => revealBulkCells(5)}\n          style={{ marginRight: \"10px\", padding: \"10px 20px\" }}\n        >\n          Reveal 5 Cells\n        </button>\n        <button\n          onClick={() => revealBulkCells(10)}\n          style={{ padding: \"10px 20px\" }}\n        >\n          Reveal 10 Cells\n        </button>\n      </div>\n      <canvas\n        ref={canvasRef}\n        width={CANVAS_WIDTH}\n        height={CANVAS_HEIGHT}\n        style={{\n          border: \"2px solid #334155\",\n          borderRadius: \"12px\",\n          boxShadow: \"0 4px 12px rgba(0,0,0,0.5)\",\n          cursor: \"pointer\",\n          maxWidth: \"100%\",\n          height: \"auto\",\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}